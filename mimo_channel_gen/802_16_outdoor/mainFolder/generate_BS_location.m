%
%   mMIMOsim: a Matlab simulator for massive MIMO systems created by Robert
%   W. Heath, Jr. (rheath@mimowireless.com) and Kien T. Truong
%   (kientruong@utexas.edu). 
%
%
%   generate locations of base stations
%   
%   Input:
%       -   PAR: the structure containing the values of the key parameters of
%           the simulation scenario
%   
%   Output:
%       -   cell_x: vector of x coordinate of the center of the cells
%       -   cell_y: vector of y coordinate of the center of the cells
%       -   bs_x: vector of x coordinate of base stations of size num_bs
%       -   bs_y: vector of y coordinate of base stations of size num_bs
%       -   bs_beam_orientation: the orientational angle of the antenna
%           boresight pointing direction of the base station sectors
%

function [cell_x, cell_y, bs_x, bs_y, bs_beam_orientation] =...
    generate_BS_location(PAR)

%   reservation for polar coordinates of base stations
bs_x = zeros(PAR.num_bs_cluster, 1);

bs_y = bs_x;

bs_beam_orientation = bs_x;

cell_x = zeros(PAR.num_cell, 1);

cell_y = zeros(PAR.num_cell, 1);

%   network sectorization pattern
half_ISD = 0.5 * PAR.ISD;

one_ISD = PAR.ISD;

onehalf_ISD = 1.5 * PAR.ISD;

two_ISD = 2 * PAR.ISD;

twohalf_ISD = 2.5 * PAR.ISD;



half_r = 0.5 * PAR.cell_radius;

one_r = PAR.cell_radius;

onehalf_r = 1.5 * PAR.cell_radius;
                
two_r = 2 * PAR.cell_radius;

twohalf_r = 2.5 * PAR.cell_radius;

three_r = 3 * PAR.cell_radius;

threehalf_r = 3.5 * PAR.cell_radius;

four_r = 4 * PAR.cell_radius;




pi_over_three = pi / 3;

two_pi_over_three = 2 * pi / 3;

four_pi_over_three = 4 * pi / 3;

five_pi_over_three = 5 * pi / 3;

network_sectorization_pattern =...
    PAR.num_cell * 1000 + PAR.num_sector_per_cell * 100 ...
    + PAR.coord_pattern * 10 + PAR.bs_cluster_per_sector;


%   polar coordinates of base stations [note] - although these codes do work, 
%   they can still be shortened.
switch PAR.cell_type
    
    case 0 % hexagonal
        
        switch network_sectorization_pattern
            
            case 1111  %   no interference cells
                
                %   center cell of interest
                cell_x = 0;
                
                bs_x = cell_x;
                
                cell_y = 0;
                
                bs_y = cell_y;
                
            case 7121  %   one layer of interference cells
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];

                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                bs_x =...
                    [0, onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];
                
                bs_y =...
                    [0, half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                
            case 7123
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];

                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                bs_cluster_per_cel_r = PAR.bs_cluster_radius;
                
                bs_cluster_per_cell_theta =...
                    [0, 2 * pi / PAR.bs_cluster_per_cell,...
                    4 * pi / PAR.bs_cluster_per_cell];
                                
                [bs_cluster_per_cell_x bs_cluster_per_cell_y] =...
                    pol2cart(bs_cluster_per_cell_theta, bs_cluster_per_cel_r);
                
                for cell_idx = 1:PAR.num_cell
                    
                    overall_bs_start_idx =...
                        (cell_idx - 1) * PAR.bs_cluster_per_cell + 1;
                    
                    overall_bs_end_idx =...
                        cell_idx * PAR.bs_cluster_per_cell;
                    
                    bs_x(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_x(cell_idx) + bs_cluster_per_cell_x;
                    
                    bs_y(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_y(cell_idx) + bs_cluster_per_cell_y;
                    
                end % for(cell_idx)
                
                
            case 7128
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];

                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                bs_cluster_per_cel_r =...
                    [0,... 
                    PAR.bs_cluster_radius...
                    * ones(1, PAR.bs_cluster_per_cell - 1)];
                
                bs_cluster_per_cell_theta =...
                    [0,...
                    0:2 * pi / (PAR.bs_cluster_per_cell - 1):...
                    (PAR.bs_cluster_per_cell - 2)...
                    * 2 * pi / (PAR.bs_cluster_per_cell - 1)];
                                
                [bs_cluster_per_cell_x, bs_cluster_per_cell_y] =...
                    pol2cart(bs_cluster_per_cell_theta, bs_cluster_per_cel_r);
                
                for cell_idx = 1:PAR.num_cell
                    
                    overall_bs_start_idx =...
                        (cell_idx - 1) * PAR.bs_cluster_per_cell + 1;
                    
                    overall_bs_end_idx =...
                        cell_idx * PAR.bs_cluster_per_cell;
                    
                    bs_x(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_x(cell_idx) + bs_cluster_per_cell_x;
                    
                    bs_y(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_y(cell_idx) + bs_cluster_per_cell_y;
                    
                end % for(cell_idx)   
                
                
            case 7311
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];
                
                bs_x = reshape(repmat(cell_x, 3, 1), 1, 21);
                
                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                bs_y = reshape(repmat(cell_y, 3, 1), 1, 21);
                
                bs_beam_orientation =...
                    repmat([pi_over_three, pi, five_pi_over_three], 1, 7);
                
            
            case 7321    % 7 cells, 3 sectors per cell
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r];

                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD];
                
                bs_x =...
                    [half_r, half_r, -one_r,...
                    two_r, two_r, half_r,...
                    half_r, half_r, -one_r,...
                    -one_r, -one_r, -twohalf_r,...
                    -one_r, -one_r, -twohalf_r,...
                    half_r, half_r, -one_r,...
                    two_r, two_r, half_r];

                bs_y =...
                    [half_ISD, -half_ISD, 0,...
                    one_ISD, 0, half_ISD,...
                    onehalf_ISD, half_ISD, one_ISD,...
                    one_ISD, 0, half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    -half_ISD, -onehalf_ISD, -one_ISD,...
                    0, -one_ISD, -half_ISD];
                
                bs_beam_orientation =...
                    repmat([four_pi_over_three, two_pi_over_three, 0], 1, 7);
                
            case 19111
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r,...
                    three_r, three_r, onehalf_r,...
                    0, -onehalf_r, -three_r,...
                    -three_r, -three_r, -onehalf_r,...
                    0, onehalf_r, three_r];
                
                bs_x = cell_x;
                
                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD,...
                    0,  one_ISD, onehalf_ISD,...
                    two_ISD, onehalf_ISD, one_ISD,...
                    0, -one_ISD, -onehalf_ISD,...
                    -two_ISD, -onehalf_ISD, -one_ISD];
                
                bs_y = cell_y;
                
            case 19311
                    
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r,...
                    three_r, three_r, onehalf_r,...
                    0, -onehalf_r, -three_r,...
                    -three_r, -three_r, -onehalf_r,...
                    0, onehalf_r, three_r];
                
                bs_x = reshape(repmat(cell_x, 3, 1), 1, 57);
                
                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD,...
                    0,  one_ISD, onehalf_ISD,...
                    two_ISD, onehalf_ISD, one_ISD,...
                    0, -one_ISD, -onehalf_ISD,...
                    -two_ISD, -onehalf_ISD, -one_ISD];
                
                bs_y = reshape(repmat(cell_y, 3, 1), 1, 57);
                
                bs_beam_orientation =...
                    repmat([pi_over_three, pi, five_pi_over_three], 1, 19);
                
            case 19321
                
                cell_x =...
                    [0,...
                    onehalf_r, 0, -onehalf_r,...
                    -onehalf_r, 0, onehalf_r,...
                    three_r, three_r, onehalf_r,...
                    0, -onehalf_r, -three_r,...
                    -three_r, -three_r, -onehalf_r,...
                    0, onehalf_r, three_r];

                cell_y =...
                    [0,...
                    half_ISD, one_ISD, half_ISD,...
                    -half_ISD, -one_ISD, -half_ISD,...
                    0, one_ISD, onehalf_ISD,...
                    two_ISD, onehalf_ISD, one_ISD,...
                    0, -one_ISD, -onehalf_ISD,...
                    -two_ISD, -onehalf_ISD, -one_ISD];
                
                bs_x =...
                    [half_r, half_r, -one_r,...
                    two_r, two_r, half_r,...
                    half_r, half_r, -one_r,...
                    -one_r, -one_r, -twohalf_r,...
                    -one_r, -one_r, -twohalf_r,...
                    half_r, half_r, -one_r,...
                    two_r, two_r, half_r,...
                    threehalf_r, threehalf_r, two_r,...
                    threehalf_r, threehalf_r, two_r,...
                    two_r, two_r, half_r,...
                    half_r, half_r, -one_r,...
                    -one_r, -one_r, -twohalf_r,...
                    -twohalf_r, -twohalf_r, -four_r,...
                    -twohalf_r, -twohalf_r, -four_r,...
                    -twohalf_r, -twohalf_r, -four_r,...
                    -one_r, -one_r, -twohalf_r,...
                    half_r, half_r, -one_r,...
                    two_r, two_r, half_r,...
                    threehalf_r, threehalf_r, two_r];

                bs_y =...
                    [half_ISD, -half_ISD, 0,...
                    one_ISD, 0, half_ISD,...
                    onehalf_ISD, half_ISD, one_ISD,...
                    one_ISD, 0, half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    -half_ISD, -onehalf_ISD, -one_ISD,...
                    0, -one_ISD, -half_ISD,...
                    half_ISD, -half_ISD, 0,...
                    onehalf_ISD, half_ISD, one_ISD,...
                    two_ISD, one_ISD, onehalf_ISD,...
                    twohalf_ISD, onehalf_ISD, two_ISD,...
                    two_ISD, one_ISD, onehalf_ISD,...
                    onehalf_ISD, half_ISD, one_ISD,...
                    half_ISD, -half_ISD, 0,...
                    -half_ISD, -onehalf_ISD, -one_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -onehalf_ISD, -twohalf_ISD, -two_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -half_ISD, -onehalf_ISD, -one_ISD];
                
                bs_beam_orientation =...
                    repmat([four_pi_over_three, two_pi_over_three, 0], 1, 19);

                
            case 27321
                
                cell_x = ...
                    [one_r, -half_r, -half_r,...
                    -two_r, -two_r, -threehalf_r,...
                    -two_r, -threehalf_r, -threehalf_r,...
                    -half_r, -half_r, -two_r,...
                    twohalf_r, one_r, one_r,...
                    four_r, four_r, twohalf_r,...
                    four_r, twohalf_r, twohalf_r,...
                    one_r, one_r, -half_r,...
                    -half_r, -two_r, -threehalf_r];
                
                cell_y =...
                    [0, half_ISD, -half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    one_ISD, half_ISD, onehalf_ISD,...
                    twohalf_ISD, onehalf_ISD, two_ISD,...
                    onehalf_ISD, one_ISD, two_ISD,...
                    one_ISD, 0, half_ISD,...
                    -one_ISD, -onehalf_ISD, -half_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -twohalf_ISD, -two_ISD, -onehalf_ISD];
                                
                                
                bs_cluster_per_cell_x = [half_r, half_r, -one_r];
                
                bs_cluster_per_cell_y = [half_ISD, -half_ISD, 0];
                
                for cell_idx = 1:PAR.num_cell
                    
                    overall_bs_start_idx =...
                        (cell_idx - 1) * PAR.bs_cluster_per_cell + 1;
                    
                    overall_bs_end_idx =...
                        cell_idx * PAR.bs_cluster_per_cell;
                    
                    bs_x(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_x(cell_idx) + bs_cluster_per_cell_x;
                    
                    bs_y(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_y(cell_idx) + bs_cluster_per_cell_y;
                    
                end % for(cell_idx)
                
                bs_beam_orientation =...
                    repmat([four_pi_over_three, two_pi_over_three, 0], 1, 27);
                
                
             case 27121
                
                cell_x = [one_r, -half_r, -half_r,...
                    -two_r, -two_r, -threehalf_r,...
                    -two_r, -threehalf_r, -threehalf_r,...
                    -half_r, -half_r, -two_r,...
                    twohalf_r, one_r, one_r,...
                    four_r, four_r, twohalf_r,...
                    four_r, twohalf_r, twohalf_r,...
                    one_r, one_r, -half_r,...
                    -half_r, -two_r, -threehalf_r];
                
                cell_y = ...
                    [0, half_ISD, -half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    one_ISD, half_ISD, onehalf_ISD,...
                    twohalf_ISD, onehalf_ISD, two_ISD,...
                    onehalf_ISD, one_ISD, two_ISD,...
                    one_ISD, 0, half_ISD,...
                    -one_ISD, -onehalf_ISD, -half_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -twohalf_ISD, -two_ISD, -onehalf_ISD];
                
                bs_x = cell_x;
                
                bs_y = cell_y;    
                
            case 27123
                
                cell_x = [one_r, -half_r, -half_r,...
                    -two_r, -two_r, -threehalf_r,...
                    -two_r, -threehalf_r, -threehalf_r,...
                    -half_r, -half_r, -two_r,...
                    twohalf_r, one_r, one_r,...
                    four_r, four_r, twohalf_r,...
                    four_r, twohalf_r, twohalf_r,...
                    one_r, one_r, -half_r,...
                    -half_r, -two_r, -threehalf_r];
                
                cell_y = ...
                    [0, half_ISD, -half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    one_ISD, half_ISD, onehalf_ISD,...
                    twohalf_ISD, onehalf_ISD, two_ISD,...
                    onehalf_ISD, one_ISD, two_ISD,...
                    one_ISD, 0, half_ISD,...
                    -one_ISD, -onehalf_ISD, -half_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -twohalf_ISD, -two_ISD, -onehalf_ISD];
                
                bs_cluster_per_cel_r = PAR.bs_cluster_radius;
                
                bs_cluster_per_cell_theta =...
                    [0, 2 * pi / PAR.bs_cluster_per_cell,...
                    4 * pi / PAR.bs_cluster_per_cell];
                                
                [bs_cluster_per_cell_x bs_cluster_per_cell_y] =...
                    pol2cart(bs_cluster_per_cell_theta, bs_cluster_per_cel_r);
                
                for cell_idx = 1:PAR.num_cell
                    
                    overall_bs_start_idx =...
                        (cell_idx - 1) * PAR.bs_cluster_per_cell + 1;
                    
                    overall_bs_end_idx =...
                        cell_idx * PAR.bs_cluster_per_cell;
                    
                    bs_x(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_x(cell_idx) + bs_cluster_per_cell_x;
                    
                    bs_y(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_y(cell_idx) + bs_cluster_per_cell_y;
                    
                end % for(cell_idx)
                
                
            case 27128
                
                cell_x = [one_r, -half_r, -half_r,...
                    -two_r, -two_r, -threehalf_r,...
                    -two_r, -threehalf_r, -threehalf_r,...
                    -half_r, -half_r, -two_r,...
                    twohalf_r, one_r, one_r,...
                    four_r, four_r, twohalf_r,...
                    four_r, twohalf_r, twohalf_r,...
                    one_r, one_r, -half_r,...
                    -half_r, -two_r, -threehalf_r];
                
                cell_y = ...
                    [0, half_ISD, -half_ISD,...
                    0, -one_ISD, -half_ISD,...
                    one_ISD, half_ISD, onehalf_ISD,...
                    twohalf_ISD, onehalf_ISD, two_ISD,...
                    onehalf_ISD, one_ISD, two_ISD,...
                    one_ISD, 0, half_ISD,...
                    -one_ISD, -onehalf_ISD, -half_ISD,...
                    -one_ISD, -two_ISD, -onehalf_ISD,...
                    -twohalf_ISD, -two_ISD, -onehalf_ISD];
                
                bs_cluster_per_cel_r =...
                    [0,... 
                    PAR.bs_cluster_radius...
                    * ones(1, PAR.bs_cluster_per_cell - 1)];
                
                bs_cluster_per_cell_theta =...
                    [0,...
                    0:2 * pi / (PAR.bs_cluster_per_cell - 1):...
                    (PAR.bs_cluster_per_cell - 2)...
                    * 2 * pi / (PAR.bs_cluster_per_cell - 1)];
                                
                [bs_cluster_per_cell_x, bs_cluster_per_cell_y] =...
                    pol2cart(bs_cluster_per_cell_theta, bs_cluster_per_cel_r);
                
                for cell_idx = 1:PAR.num_cell
                    
                    overall_bs_start_idx =...
                        (cell_idx - 1) * PAR.bs_cluster_per_cell + 1;
                    
                    overall_bs_end_idx =...
                        cell_idx * PAR.bs_cluster_per_cell;
                    
                    bs_x(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_x(cell_idx) + bs_cluster_per_cell_x;
                    
                    bs_y(overall_bs_start_idx:overall_bs_end_idx) =...
                        cell_y(cell_idx) + bs_cluster_per_cell_y;
                    
                end % for(cell_idx)   
                
            otherwise
                
                errorMsg = strcat('ERROR: This number of hexagonal cells',... 
                'is not supported yet!');
                error(errorMsg);
                
        end % switch (num_bs)
        
    case 1 % circle
        switch network_sectorization_pattern
            
            case 101  %   no inter-cell interference
                
                bs_x = 0;
                bs_y = 0;
                
            otherwise
                
                errorMsg = strcat('ERROR: This number of circle cells',...
                    'is not supported yet!');
                error(errorMsg);
                
        end % switch (num_bs)
        
    otherwise
        
        errorMsg = 'ERROR: This simulation scenario is not supported yet!';
        error(errorMsg);
        
end % switch(scenario_idx)

% figure;
% plot(cell_x, cell_y, 'sr');

end % function generate_BS_location()